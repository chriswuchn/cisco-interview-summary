1、真题给定一个英文字符串,请写一段代码找出这个字符串中首先出现三次的那个英文字符(需要区分大小写)。
python解法：
if __name__=='__main__':
    keydict={}
    string=input()
    for s in string:  
        if s.isalpha() or s.isdigit():
            if s in set(keydict):
                keydict[s]+=1
                if(keydict[s]>=3):
                    print(s)                   
                    break
            else:
                keydict[s]=1
  
            
C++解法
#include <stdio.h>
#include <string>
#include <iostream>
using namespace std;
int main()
{
	string s;
	//char s[100];
	//gets(s);
	getline(cin,str);
	//note:cin>>s有问题，碰到NULL会停下来	
	while(cin>>s){}不会跳出来，只有按了enter+Ctrl+z（windows）+enter才会跳出来；这样可以持续输入和计算
	//https://blog.csdn.net/misayaaaaa/article/details/53332219
	int arraysum[256] = {0};
	for (int i = 0; i < s.length(); ++i)
	{
		if( ++arraysum[str[i]] == 3){
            		if(str[i] >= 'a' && str[i] <= 'z' || str[i] >= 'A' && str[i] <= 'Z'){
               			cout<<str[i]<<endl;
                		break;
			}
            }
        }
	return 0;
}

3、单向链表翻转问题（关键就是创建两个指针，一前一后）
#include "stdafx.h"
#include <iostream>
#include <stdio.h>
#include <assert.h>

using namespace std;
template<class T>
struct node
{
	T data;
	struct node<T> *next;
};


template<class T>
node<T> *create_list(int len)
{
	assert(len >= 1);
	node<T> *head=new node<T>;
	T data;
	cin >> data;
	head->data = data;
	node<T> *tmp=head;
	for (int i = 0; i < len-1; i++)
	{
		node<T> *p=new node<T>;
		T data;
		cin >> data;
		p->data = data;
		tmp->next = p;
		tmp = tmp->next;
		cout << p->data << endl;
	}
	tmp->next = NULL;
	return head;
}

template<class T>
void delete_list(node<T> *head)
{
	node<T> *tmp = head;
	while (tmp->next != NULL)
	{
		node<T> *p = tmp;
		tmp = tmp->next;
		delete p;		
	}
}

template<class T>
node<T>* reverse_list(node<T> *head)
{
	node<T> *tmp1 = head;
	node<T> *tmp2 = head->next;
	if (tmp2 == NULL)
	{
		return head;
	}
	while (tmp2->next != NULL)
	{
		node<T>*p= tmp2->next;
	    tmp2->next= tmp1;
	    tmp1 = tmp2;
		tmp2=p;
	}
	tmp2->next=tmp1;
	head->next = NULL;
	return tmp2;
}
4。给定一个数组比如a={1,2,3,4,5,6,2},找出两个数和为6，返回这些索引対。 期望输出的结果[0,4]，[1,3],[3,6]，时间复杂度O(n)，关键是用哈希表
struct index{
	int a;
	int b;
};

class Solution {
public:
	vector<index> twoSum(vector<int>& nums, int target) {
		vector<index> ret;
		unordered_map<int, int>map;
		for (int i = 0; i<nums.size(); ++i){
			map.insert(std::make_pair(nums[i],i));
		}
		for (int i = 0; i<nums.size(); i++)
		{
			auto  it = map.find(target - nums[i]);		
			cout << target - nums[i] << endl;
			if (it != map.end()&&(it->second)>i){
				cout << it->first << " " << it->second;
				index &&x = { i, it->second };
				ret.push_back(x);
			}
		}
		return ret;
	}
};












